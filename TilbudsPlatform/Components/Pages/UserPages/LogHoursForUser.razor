@page "/log-hours"
@inject IWorkTaskInterface WorkTaskService
@rendermode InteractiveServer

<h3>Timelog</h3>

<div class="mb-3">
    <label for="workTaskId">Arbejdsopgave ID:</label>
    <InputNumber id="workTaskId" @bind-Value="workTaskId" class="form-control" />
</div>

<div class="mb-3">
    <label for="description">Beskrivelse:</label>
    <InputText id="description" @bind-Value="logDescription" class="form-control" />
</div>

<div class="mb-3">
    <label for="hours">Timer:</label>
    <InputNumber id="hours" @bind-Value="logHours" class="form-control" />
</div>

<button class="btn btn-primary" @onclick="LogHours" disabled="@isLoading">Log Hours</button>

<h4 class="mt-5">Opdater Timelog</h4>
<div class="mb-3">
    <label for="worklogId">Arbejdslog ID:</label>
    <InputNumber id="worklogId" @bind-Value="worklogId" class="form-control" />
</div>

<div class="mb-3">
    <label for="updateDescription">Ny Beskrivelse:</label>
    <InputText id="updateDescription" @bind-Value="updateDescription" class="form-control" />
</div>

<div class="mb-3">
    <label for="updateHours">Ny Timer:</label>
    <InputNumber id="updateHours" @bind-Value="updateHours" class="form-control" />
</div>

<button class="btn btn-success" @onclick="UpdateLoggedHours" disabled="@isLoading">Opdater timer</button>

<h4 class="mt-5">Arbejdsopgaver for opgave ID: @workTaskId</h4>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (worklogs == null)
{
    <p>Enter a Work Task ID and log hours to view worklogs.</p>
}
else if (!worklogs.Any())
{
    <p>No worklogs found for this task.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Description</th>
                <th>Hours</th>
                <th>Date Worked</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var log in worklogs)
            {
                <tr>
                    <td>@log.Id</td>
                    <td>@log.Description</td>
                    <td>@log.HoursWorked</td>
                    <td>@log.DateWorked</td>
                </tr>
            }
        </tbody>
    </table>
}

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {
    private int workTaskId;
    private decimal logHours;
    private string logDescription = string.Empty;

    private int worklogId;
    private decimal updateHours;
    private string updateDescription = string.Empty;

    private IEnumerable<Worklog>? worklogs;
    private string? errorMessage;
    private bool isLoading = false;

    private async Task LogHours()
    {
        try
        {
            isLoading = true;
            await WorkTaskService.LogHoursAsync(workTaskId, logHours, logDescription);
            await LoadWorklogs();
            logHours = 0;
            logDescription = string.Empty;
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error logging hours: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task UpdateLoggedHours()
    {
        try
        {
            isLoading = true;
            await WorkTaskService.UpdateLoggedHoursAsync(worklogId, updateHours, updateDescription);
            await LoadWorklogs();
            updateHours = 0;
            updateDescription = string.Empty;
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating logged hours: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadWorklogs()
    {
        try
        {
            isLoading = true;

            var workTasks = await WorkTaskService.GetByProjectIdAsync(workTaskId);

            worklogs = workTasks.SelectMany(wt => wt.Worklogs).ToList();

            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading worklogs: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}
