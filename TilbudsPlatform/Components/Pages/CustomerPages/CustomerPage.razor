@page "/customer"
@inject ICustomerInterface CustomerService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h3>Customer Page</h3>

<div>
    <h4>Add New Customer</h4>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    <EditForm Model="newCustomer" OnSubmit="AddCustomer">
        <div>
            <label for="name">Name:</label>
            <input id="name" @bind="newCustomer.Name" />
        </div>
        <div>
            <label for="email">Email:</label>
            <input id="email" @bind="newCustomer.Email" />
        </div>
        <button type="submit">Add Customer</button>
    </EditForm>
</div>

<hr />

<div>
    <h4>Customer List</h4>
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Email</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (customers.Any())
            {
                @foreach (var customer in customers)
                {
                    <tr>
                        <td>@customer.Id</td>
                        <td>@customer.Name</td>
                        <td>@customer.Email</td>
                        <td>
                            <button class="btn btn-danger" @onclick="() => DeleteCustomerById(customer.Id)">Delete</button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="4">No customers available.</td>
                </tr>
            }
        </tbody>
    </table>
</div>


@code {
    private Customer newCustomer = new Customer();
    private List<Customer> customers = new List<Customer>();
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        customers = (await CustomerService.GetAllAsync()).ToList();
    }

    private async Task AddCustomer()
    {
        try
        {
            await CustomerService.AddCustomerAsync(newCustomer.Name, newCustomer.Email);
            newCustomer = new Customer();
            errorMessage = string.Empty;

            customers = (await CustomerService.GetAllAsync()).ToList();

            NavigationManager.Refresh(true);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }

    private async Task DeleteCustomerById(int id)
    {
        try
        {
            await CustomerService.DeleteCustomerByIdAsync(id);
            customers = (await CustomerService.GetAllAsync()).ToList(); // Refresh the list
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }
}
