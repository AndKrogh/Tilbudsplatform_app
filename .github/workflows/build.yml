name: CI/CD Build and Docker Push

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8'

      - name: Install dotnet format
        run: dotnet tool install --global dotnet-format

      - name: Setup PATH for .NET tools
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Run dotnet format
        run: dotnet format TilbudsPlatform/TilbudsPlatform.core.csproj --verify-no-changes --verbosity diagnostic > format-output.log

      - name: Run dotnet format on solution (.sln)
        run: dotnet format TilbudsPlatform/TilbudsPlatform.sln --verify-no-changes --verbosity diagnostic > format-output-sln.log

      - name: Fail on unformatted code
        if: failure()
        run: echo "Code formatting issues found. Please run 'dotnet format' locally and commit the changes."

      - name: Run Unit Tests and Integration Tests
        run: dotnet test TilbudsPlatform.Tests/TilbudsPlatform.Tests.csproj --logger "trx;LogFileName=test-results.trx"

      - name: Check if test-results.trx exists
        run: |
          if [ -f TilbudsPlatform.Tests/TestResults/test-results.trx ]; then
            echo "Test results file found."
          else
            echo "No test results file found."
            exit 1
          fi

      - name: Upload Test Results as Artifact
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: TilbudsPlatform.Tests/TestResults/test-results.trx

      - name: Show Test Results
        if: success() || failure()
        run: |
          echo "Test results:"
          cat TilbudsPlatform.Tests/TestResults/test-results.trx

  build-and-push-docker:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Debug directory structure
        run: ls -R

      - name: Verify Dockerfile existence
        run: |
          if [ -f TilbudsPlatform/Dockerfile ]; then
            echo "Dockerfile exists."
          else
            echo "Dockerfile not found."
            exit 1
          fi

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Login to DigitalOcean Registry
        run: doctl registry login

      - name: Build Docker Image
        run: |
          docker build -t my-image:${{ github.sha }} -f TilbudsPlatform/Dockerfile TilbudsPlatform

      - name: Tag and Push Latest to DigitalOcean Registry
        run: |
            docker tag my-image:${{ github.sha }} registry.digitalocean.com/tilbudsplatform-registry/my-image:latest
            docker push registry.digitalocean.com/tilbudsplatform-registry/my-image:latest
